<!DOCTYPE html>
<html>
<head>
    <title>Story Map App</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Jul 10 2017 11:48:34 GMT-0600 (MDT) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Jul 10 2017 11:48:34 GMT-0600 (MDT)";
        var STORY    = "US951";
        var BUILDER  = "corkr03";
        var CHECKSUM = 50705149487;
    </script>

    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);
                
            if ( STORY ) {
                build_html = build_html + "<br/>Source story: " + STORY;
            }
                
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: build_html
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.cardboard.row.Row, {
        /**
         * Determine whether the specified record belongs in this row
         * @param {Rally.data.Model} record
         * @returns {Boolean}
         */
        isMatchingRecord: function(record) {
            var recordValue = record.get(this.getFieldDef().name),
                rowValue = this.getRowDisplayValue() ? this.getRowDisplayValue() : null;

            var recordFieldName = recordValue && recordValue.Name ? recordValue.Name.toLowerCase() : null;

            return ((rowValue && rowValue.toLowerCase()) === recordFieldName);
        },

        // isMatchingRecord: function(record) {
        //     var recordValue = record.get(this.getFieldDef().name),
        //         rowValue = this.getRowValue();

        //     return (rowValue === recordValue ||
        //         (Rally.util.Ref.isRefUri(rowValue) &&
        //             Rally.util.Ref.getRelativeUri(recordValue) === Rally.util.Ref.getRelativeUri(rowValue)));
        // },
});

Ext.override(Rally.ui.combobox.ArtifactSearchComboBox, {

      applyState: function(state) {
        if (state && state.value && state.value !== null){
      
          this.store.on('load', function() {

              this.setValue(state.value);
              this.value = state.value ;
              this.saveState();
              this.fireEvent('stateloaded');
          }, this, {single: true});
          this.store.load();
        }
      }
});

Ext.define('CATS.utils.CardboardPrint',{
    // singleton: true,
    // print: function(cardboard){
    //   console.log('columns', cardboard.getColumns());
    //   console.log('rows', cardboard.getRows());
    //   console.log('cards', cardboard.getCards());
    //
    // }
    //     extend: 'Ext.Window',
      //  logger: new Rally.technicalservices.Logger(),
        truncateText: '...',
        title: 'Print Story Map',
        cardboard: null,
        styleSheetTitle: "printStoryMap",
        currentDocument: null,
        logger: null,
        /**
         *  Array of the following:
         *  dataIndex
         *  maxLength (default 0)
         *  cls (defaults are: card-title, content,
         */
        displayFields: ['FormattedID','Name'],

        constructor: function(config){
           this.title = config.title || this.title;
           this.cardboard = config.cardboard;
           this.logger = config.logger;
           this.currentDocument = config.currentDocument;
           this.displayFields = config.displayFields || this.displayFields;
           this.portfolioItem = config.portfolioItem;
        },
        show: function(){
            var options = "toolbar=1,menubar=1,scrollbars=yes,scrolling=yes,resizable=yes,width=1000,height=500";
            this.win = window.open('',this.title);

          //  var html = this._buildCardsHTML();
            this.win.document.write('<html><head><title>' + this.title + '</title>');
            this.win.document.write('<style>');
            this.win.document.write(this._getStyleSheet(this.styleSheetTitle));
            this.win.document.write('</style>');
            this.win.document.write('</head><body class="landscape">');
            //this.win.document.write(html);
            this.win.document.write('</body></html>');


        },

        print: function() {
          this.logger.log('print', this.win);
          if ( !this.win ) {
            this.show();
          }
          this.win.document.body.innerHTML = this._buildCardsHTML();

        },
        _getFeatureRenderer: function(record){

          var vals = [];
          this.logger.log('_getFeatureRenderer', record.getData(), this.displayFields);
          Ext.Array.each(this.displayFields, function(d){
            var val = record.get(d);
            if (val){
              vals.push(val);
            }
          });
          return vals.join('<br>');
        },
        _getStoryRecords: function(rows, columns, rowIdx, colIdx){
            var col = columns[colIdx],
                row = rows[rowIdx],
                release = rows[rowIdx] && rows[rowIdx].value && rows[rowIdx].value.Name || 0;

                var records = [];
                col.getStore().each(function(rec){
                  if (rec.get('Release') && rec.get('Release').Name === release){
                     records.push(rec);
                  }
                  if (release === 0 && !rec.get('Release')){
                    records.push(rec);
                  }
                });
                return records;
        },
        _getStoryCard: function(record){
            var vals = [record.get('FormattedID') + ": " + record.get('Name')];
            this.logger.log('_getStoryCard', record.getData(), this.displayFields);
            Ext.Array.each(this.displayFields, function(d){
              if (d !== "Name" && d !== "FormattedID"){
                var val = record.get(d);
                if (val){
                  if (Ext.isObject(val)){
                    if (val._refObjectName){
                       val = val._refObjectName;
                    } else if (val._tagsNameArray && val._tagsNameArray.length > 0){
                        val = _.pluck(val._tagsNameArray, 'Name').join(', ')
                    } else if (val.Count >= 0){
                       val = val.Count;
                    }
                  }
                  var fieldName = record.getField(d).displayName;
                  vals.push(fieldName + ": " + val);
                }
              }

            });
            this.logger.log('_getStoryCard vals', vals);
            return vals.join('<br>');
        },
        _getStoryRenderer: function(records, cardColumns){
            if (!records || records.length === 0){
               return Ext.String.format('<td colspan="{0}"></td>',cardColumns);
            }

            var html = "<td><table width=\"100%\">",
                colIdx = 0,
                width = 100/cardColumns;

            Ext.Array.each(records, function(r){
               colIdx++;
               if (colIdx === 1){
                 html += '<tr>';
               }
               html += Ext.String.format('<td class="story-cell" width="{1}%">{0}</td>', this._getStoryCard(r), width);
               if (colIdx === cardColumns){
                  html += "</tr>";
                  colIdx = 0;
               }
            }, this);

            if (colIdx > 0 && colIdx < cardColumns){
              for (var i=colIdx; i < cardColumns; i++){
                html += '<td class="empty-cell" width="{1}%"></td>'
              }
              html += '</tr>';
            }

            html += "</table></td>";
            return html;

        },
        _getReleaseRenderer: function(recordData){
          return recordData && recordData.Name || "No Release";
        },
        _buildCardsHTML: function() {

            this.logger.log('cardboard', this.cardboard);
              this.logger.log('columns', this.cardboard.getColumns());
              this.logger.log('rows', this.cardboard.getRows());
              this.logger.log('cards', this.cardboard.getCards());


              var columns = Ext.Array.filter(this.cardboard.getColumns(), function(c){
                return c.headerCell && !/collapsed/.test(c.headerCell.className);
              });
    
              var colCount = columns.length,
                  rowCount = this.cardboard.getRows().length;

              var colWidth = 100/colCount;
              this.logger.log('columnWidth', colWidth);
              var html = Ext.String.format("<h1 class=\"initiative-title\">{0}: {1}</h1>",this.portfolioItem.get('FormattedID'), this.portfolioItem.get('Name'));

              html += '<table style="width:100%"><thead>';

              var multiColumns = false,
                  storyColCount = 1;
              if (multiColumns){
                storyColCount = Math.floor(8/colCount);
              }

              for (var i=0; i<colCount; i++){
                var val = this._getFeatureRenderer(columns[i].record);
                html += Ext.String.format('<th class="feature-cell" style="width:' + colWidth + '%">{0}</td>', val);
              }
              html += '</thead>';
              this.logger.log('html', html);

              var rows = this.cardboard.getRows();
              for (var i=0; i<rowCount; i++){
                 //insert divider row here
                 var relRecord = rows[i].value;
                 html += Ext.String.format('<tr><td colspan="' + colCount + '" class="release-cell">{0}</td></tr>', this._getReleaseRenderer(relRecord));
                 html+= '<tr>';
                 for (var j=0; j<colCount; j++){
                    var records = this._getStoryRecords(rows, columns, i, j);
                    html += this._getStoryRenderer(records, storyColCount);
                 }
                 html += '</tr>';
              }

              html += '</table>';
              this.logger.log('html', html);
              return html;
        },

        _getStyleSheet: function(styleSheetTitle) {
            this.logger.log('getStyleSheet');
            var styleSheet;
            // var docs = Ext.getDoc();
            var elems = this.currentDocument.query('style');

            for (var i=0; i< elems.length; i++){
                if (elems[i].title == styleSheetTitle){
                    styleSheet = elems[i];
                }
            }
            return styleSheet.innerHTML;
        }
});

Ext.define('CATS.utils.FieldPicker', {
    alias: 'widget.fieldpickerbutton',
    extend:'Rally.ui.Button',
    requires: [
        'Rally.ui.popover.Popover',
        'Rally.ui.Button',
        'Rally.ui.picker.FieldPicker',
        'Ext.state.Manager'
    ],
    toolTipConfig: {
        html: 'Show Columns',
        anchor: 'top'
    },
    iconCls: 'icon-add-column',

    cls: 'field-picker-btn secondary rly-small',

    applyText: "Apply",

    alwaysSelectedValues: ['FormattedID', 'Name'], // DragAndDropRank gets added in init if Drag and Drop is enabled for the workspace in the component's context

    fieldBlackList: [],

    fieldPickerConfig: {},

    buttonConfig: {},

    modelNames: ['HierarchicalRequirement'],

    rankingEnabled: false,

    margin: '3 9 0 0',

    //This does not show the Rank column

    constructor: function (config) {
        this.config = _.merge({}, this.config || {}, config || {});
        this.callParent([config]);
    },

    initComponent: function() {

        if (this.models){
            this.on('click', this._createPopover, this);
            this.callParent(arguments);
            return;
        }

        if (this.context && this.modelNames && this.modelNames.length > 0){
            Rally.data.ModelFactory.getModels({
                types: this.modelNames,
                context: this.context,
                success: function(models){
                    console.log('models');
                    this.models = models;

                },
                failure: function(failedParam){
                    console.log('failedparam');
                },
                scope: this
            });
            this.on('click', this._createPopover, this);
        } else {
            this.iconCls = 'icon-none';
            var msg = "Please update the CATS.utils.FieldPicker configuration with modelNames and context";
            this.toolTipConfig= {
                html: '<div style="color:red;">' + msg + '</div>'
            };
            this.on('click', function(){ Rally.ui.notify.Notifier.showError({message: msg}); });
        }
        this.callParent(arguments);
    },
    getFields: function(){
        return this._fields || this.alwaysSelectedValues;
    },
    _getPickerConfig: function() {
        var pickerConfig;
        pickerConfig = _.extend({
            value: this._fields,
            fieldBlackList: this.fieldBlackList,
            alwaysSelectedValues: this.alwaysSelectedValues,
            context: this.context
        }, this.fieldPickerConfig);

        return pickerConfig;
    },

    _createPopover: function(btn) {
        var popoverTarget = btn.getEl();

        this.popover = Ext.create('Rally.ui.popover.Popover', {
            target: popoverTarget,
            placement: ['bottom', 'left', 'top', 'right'],
            cls: 'field-picker-popover',
            toFront: Ext.emptyFn,
            buttonAlign: 'center',
            title: this.getTitle(),
            listeners: {
                destroy: function () {
                    this.popover = null;
                },
                scope: this
            },
            buttons: [
                {
                    xtype: "rallybutton",
                    text: this.applyText,
                    cls: 'field-picker-apply-btn primary rly-small',
                    listeners: {
                        click: function() {
                            this._onApply(this.popover);
                        },
                        scope: this
                    }
                },
                {
                    xtype: "rallybutton",
                    text: 'Cancel',
                    cls: 'field-picker-cancel-btn secondary dark rly-small',
                    listeners: {
                        click: function() {
                            this.popover.close();
                        },
                        scope: this
                    }
                }
            ],
            items: [
                _.extend({
                    xtype: 'rallyfieldpicker',
                    cls: 'field-picker',
                    itemId: 'fieldpicker',
                    modelTypes: this._getModelTypes(),
                    alwaysExpanded: true,
                    width: 200,
                    emptyText: 'Search',
                    selectedTextLabel: 'Selected',
                    availableTextLabel: 'Available',
                    listeners: {
                        specialkey: function(field, e) {
                            if (e.getKey() === e.ESC) {
                                this.popover.close();
                            }
                        },
                        scope: this
                    }
                }, this._getPickerConfig())
            ]
        });
    },

    _getModelTypes: function() {
        return _.pluck(this._getModels(), 'typePath');
    },

    _getModels: function() {
        return _.reduce(this.models, function(accum, model) {
            if (model.typePath === 'artifact') {
                accum = accum.concat(model.getArtifactComponentModels());
            } else {
                accum.push(model);
            }
            return accum;
        }, []);
    },

    getTitle: function () {
        return 'Show Columns';
    },

    /**
     * Update the fields displayed. In grid mode this will be the columns displayed. In board mode it will be
     * the fields on the cards
     *
     * @param {String[]|Object[]} fields A list of field names to display
     * @param {Boolean} true to suspend store load if it will be triggered elsewhere
     */
    updateFields: function (fields, suspendLoad) {
        this._fields = fields;
        if (this.popover && this.popover.down('rallyfieldpicker')) {
            this.popover.down('rallyfieldpicker').setValue(fields.join(','));
        }
        this.saveState();
    },
    getState: function(){
        return {
            fields: this._fields
        };
    },
    applyState: function(state){
        if (state){
            this._fields = state.fields;
        }
    },
    _onApply: function(popover) {
        var fieldPicker = popover.down('rallyfieldpicker'),
            fields = _.map(fieldPicker.getValue(), function (field) {
                return field.get('name');
            });

        this.updateFields(fields);
        popover.close();

        this.fireEvent('fieldsupdated', fields);
    }
});

Ext.define("StoryMapApp", {
    extend: 'Rally.app.App',
    settingsScope: 'workspace',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
      {xtype:'container',itemId:'print_box',layout:{type:'hbox'},
          width: '100pct'
      },
        {xtype:'container',itemId:'selector_box',layout:{type:'hbox'},
            width: '100pct'
        },
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "StoryMapApp"
    },

    config: {
        defaultSettings: {
            piLevelType: 'UserStory'
        }
    },

    getSettingsFields: function() {
        var me = this;

        var piLevelType = this.getPILevelType();

        var typeFilters = [{property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'}];
        var settings = [
            {
                xtype      : 'fieldcontainer',
                fieldLabel : 'Artifact to Map',
                defaultType: 'radiofield',
                stateful: true,
                stateId:'radiofield_xx',
                width: 300,
                defaults: {
                    flex: 1
                },
                layout: 'vbox',
                items: [
                    {
                        boxLabel  : me.secondLevelPI,
                        name      : 'piLevelType',
                        inputValue: me.secondLevelPI,
                        id        : 'radio1',
                        checked: me.secondLevelPI && piLevelType === me.secondLevelPI
                    }, {
                        boxLabel  : 'User Story',
                        name      : 'piLevelType',
                        inputValue: 'UserStory',
                        id        : 'radio2',
                        checked: piLevelType === 'UserStory'
                    }
                ]
            },
            {
                xtype: 'rallyfieldpicker',
                name: 'columnNames',
                autoExpand: true,
                modelTypes: ['HierarchicalRequirement','PortfolioItem'],
                //modelTypes: piLevelType && piLevelType != 'UserStory' ? [piLevelType] : ['HierarchicalRequirement'],
                alwaysSelectedValues: ['FormattedID','Name'],
                fieldBlackList: ['Attachments','Children']
            }
            ];
        return settings;
    },

    getPILevelType : function(){
        return this.getSetting('piLevelType') ? this.getSetting('piLevelType') : 'UserStory' ;
    },

    launch: function() {
        var me = this;

        me.selectedPiLevelType = this.getPILevelType();

        me._getPITypes().then({
            success: function(results){
                Ext.Array.each(results, function(pi){
                    if(pi.get('Ordinal')==0){
                        me.featurePI = pi.get('TypePath');
                    }
                    if(pi.get('Ordinal')==1){
                        me.secondLevelPI = pi.get('TypePath');
                    }
                    if(pi.get('Ordinal')==2){
                        me.thirdLevelPI = pi.get('TypePath');
                    }
                    if(pi.get('Ordinal')==3){
                        me.fourthLevelPI = pi.get('TypePath');
                    }

                });

                Deft.Promise.all([me._getModel('HierarchicalRequirement'),me._getModel(me.featurePI),me._getReleases(),me._getModel(me.secondLevelPI),me._getModel(me.thirdLevelPI)],me).then({
                    scope: me,
                    success: function(results) {
                        me.storyModel = results[0];
                        var scheduleStateField = results[0].getField('ScheduleState');
                        scheduleStateField.getAllowedValueStore().load({
                            fetch: ['StringValue'],
                            callback: function(allowedValues, operation, success){
                                if (success){
                                    var values = _.map(allowedValues, function(av){return av.get('StringValue')});
                                    var i = 0;
                                    me.logger.log('AllowedValues ', values);
                                    me.scheduleStateFieldInitialValue = values[0] == "" ?  values[1]:values[0];

                                } else {
                                    var msg = 'Error retrieving allowed values for ScheduleState' + operation.error.errors[0];
                                    Rally.ui.notify.Notifier.showError({message: msg});
                                }
                            },
                            scope: me
                        });


                        me.featureModel = results[1];
                        var stateField = results[1].getField('State');
                        stateField.getAllowedValueStore().load({
                            fetch: ['StringValue'],
                            callback: function(allowedValues, operation, success){
                                if (success){
                                    var values = _.map(allowedValues, function(av){return av.get('_ref')});
                                    var i = 0;
                                    me.logger.log('AllowedValues ', values);
                                    me.stateFieldInitialValue = values[0] == "null" ?  values[1]:values[0];

                                } else {
                                    var msg = 'Error retrieving allowed values for State' + operation.error.errors[0];
                                    Rally.ui.notify.Notifier.showError({message: msg});
                                }
                            },
                            scope: me
                        });

                        me.releases = results[2];
                        me.secondLevelPIModel = results[3];
                        var secondLevelStateField = results[3].getField('State');
                        secondLevelStateField.getAllowedValueStore().load({
                            fetch: ['StringValue'],
                            callback: function(allowedValues, operation, success){
                                if (success){
                                    var values = _.map(allowedValues, function(av){return av.get('_ref')});
                                    var i = 0;
                                    me.logger.log('AllowedValues ', values);
                                    me.secondLevelStateFieldInitialValue = values[0] == "null" ?  values[1]:values[0];

                                } else {
                                    var msg = 'Error retrieving allowed values for State' + operation.error.errors[0];
                                    Rally.ui.notify.Notifier.showError({message: msg});
                                }
                            },
                            scope: me
                        });


                        me.thirdLevelPIModel = results[4];

                        var thirdLevelStateField = results[4].getField('State');
                        thirdLevelStateField.getAllowedValueStore().load({
                            fetch: ['StringValue'],
                            callback: function(allowedValues, operation, success){
                                if (success){
                                    var values = _.map(allowedValues, function(av){return av.get('_ref')});
                                    var i = 0;
                                    me.logger.log('AllowedValues ', values);
                                    me.thirdLevelStateFieldInitialValue = values[0] == "null" ?  values[1]:values[0];

                                } else {
                                    var msg = 'Error retrieving allowed values for State' + operation.error.errors[0];
                                    Rally.ui.notify.Notifier.showError({message: msg});
                                }
                            },
                            scope: me
                        });

                        me.addPickers(me.selectedPiLevelType);
                    },
                    failure: function(error_message){
                        alert(error_message);
                    }
                }).always(function() {
                    me.setLoading(false);
                });


            }
        });


    },

    _getPITypes: function() {
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store',{
            autoLoad: true,
            model: 'TypeDefinition',
            sorters: [{property:'Ordinal', direction: 'DESC'}],
            filters: [{property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'}],
            fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable','Ordinal','Name'],
            listeners: {
                load: function(store, records) {
                    deferred.resolve(records);
                }
            }
        });

        return deferred.promise;
    },

    _getReleases: function(){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.create('Rally.data.wsapi.Store', {
            model: 'Release',
            fetch: ['Name','ObjectID','Project','ReleaseDate'],
            context: {
                projectScopeUp: false,
                projectScopeDown: false
            },
            limit: 'Infinity',
            sorters: [{
                property: 'ReleaseDate',
                direction: 'DESC'
            }]
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    //deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    _getModel: function(modelType){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Rally.data.ModelFactory.getModel({
            type: modelType, //'HierarchicalRequirement',
            success: function(model){
                deferred.resolve(model);
            },
            scope: me
        });

        return deferred.promise;
    },
    _printBoard: function(){

        var cardboard = this.down('rallycardboard');
        if (!cardboard){
          return;
        }

        var fields = this._getAlwaysSelectedFields() || ['FormattedID','Name'];
        this.logger.log('_printBoard', fields);

        var win = Ext.create('CATS.utils.CardboardPrint',{
            cardboard: cardboard,
            displayFields: fields,
            currentDocument: Ext.getDoc(),
            logger: this.logger,
            portfolioItem: this.getPortfolioItem()
        });

        win.show();
        win.print();
    },
    addPickers: function(){
        var me = this;
        var piType = me.selectedPiLevelType == 'UserStory' ? me.featurePI : me.thirdLevelPI
        var releaseNames = [];
        var releaseCombo = [];

        Ext.Array.each(me.releases, function(rel){
            if (!Ext.Array.contains(releaseNames, rel.get('_refObjectName'))){
                releaseNames.push(rel.get('_refObjectName'));
                releaseCombo.push({_refObjectName: rel.get('_refObjectName'), _ref: rel.get('_refObjectName')});
            }
        });

        me.getPrintBox().removeAll();

        var fp = me.getPrintBox().add({
          xtype: 'fieldpickerbutton',
            modelNames: ['HierarchicalRequirement'],
            context: this.getContext(),
            margin: '10 5 10 5',
            stateful: true,
            stateId: 'board-columns'
        });
        fp.on('fieldsupdated', this._updateView, this);

        me.getPrintBox().add({
          xtype:'rallybutton',
          iconCls: 'icon-print',
          cls: 'secondary rly-small',
            margin: '10 5 10 5',
          listeners: {
            click: this._printBoard,
            scope: this
          }
        });

        me.getSelectorBox().removeAll();

        me.getSelectorBox().add({xtype:'panel',itemId:'row_1', bodyPadding: 5,  width: '50%', height: 150, title: 'Display Board'},
                                {xtype:'panel',itemId:'row_2', bodyPadding: 5,  width: '50%', height: 150, title: 'Create ' + piType});

        me.getContainer('#row_1').add({
            xtype: 'rallyartifactsearchcombobox',
            width: 300,
            margin: '10 10 10 10',
            fieldLabel: "Portfolio Item",
            labelAlign: 'right',
            remoteFilter: true,
            emptyText: "Type ID or Keyword to Search...",
            stateful: true,
            stateId: "story-map-app-selected-portfolio",
            storeConfig: {
                pageSize: 2000,
                models: me.selectedPiLevelType == 'UserStory' ? [me.secondLevelPI] :[me.fourthLevelPI],
                context: {project: null}
            },
            listeners: {
              stateloaded: this._updateView,
              beforestatesave:function(me, state){

                if (state && state.value === null){
                  return false;
                }
              },
              scope: this
            }
        });

        if(me.selectedPiLevelType == 'UserStory'){
            me.getContainer('#row_1').add({
                xtype:'rallycombobox',
                fieldLabel: 'Releases',
                itemId: 'cbReleases',
                margin: '10 10 10 10',
                width: 300,
                labelAlign: 'right',
                stateful: true,
                stateId: "story-map-app-releases",
                store: Ext.create('Rally.data.custom.Store',{
                    data: releaseCombo,
                    fields: ['_refObjectName','_ref'],
                    pageSize:2000
                }),
                multiSelect: true
            });
        }

        me.getContainer('#row_1').add({
                xtype: 'rallybutton',
                text: 'Update',
                margin: '10 10 10 10',
                defaultAlign: 'right',
                listeners: {
                    click: this._updateView,
                    scope: this
                }
            });

        me.getContainer('#row_2').add({
                xtype: 'textfield',
                itemId:'featureName',
                name: 'featureName',
                fieldLabel: piType.replace('PortfolioItem/','') + ' Name',
                margin: '10 10 10 10',
                width:300,
                allowBlank: false  // requires a non-empty value
        });

        me.getContainer('#row_2').add({
            xtype: 'rallybutton',
            text: 'Create ' + piType.replace('PortfolioItem/',''),
            margin: '10 10 10 10',
            cls: 'primary',
            listeners: {
                click: me._createFeatures,
                scope: me
            }
        });

    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getPrintBox: function(){
        return this.down('#print_box');
    },
    getContainer: function(name){
        return this.down(name);
    },

    getDisplayBox: function(){
        return this.down('#display_box');
    },
    getPortfolioItem: function(){
        this.logger.log('getPortfolioItem', this.down('rallyartifactsearchcombobox').getValue());
        var val = this.down('rallyartifactsearchcombobox') && this.down('rallyartifactsearchcombobox').getValue(),
            rec = this.down('rallyartifactsearchcombobox') && this.down('rallyartifactsearchcombobox').getRecord() || null;

            this.logger.log('getPortfolioItem', val, this.down('rallyartifactsearchcombobox').getStore());
        if (val && rec === null){
            this.down('rallyartifactsearchcombobox').getStore().each(function(r){
              if (r.get('_ref') === val){
                 rec = r;
              }
              console.log('r',r.get('_ref'),r.getData());
            });
           this.logger.log('rec', rec);
        }
        return rec;

    },
    showErrorNotification: function(msg){
        this.setLoading(false);
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    getScopedStateId: function (suffix) {
        return this.getContext().getScopedStateId(this.getStateId(suffix));
    },
    showMsg: function(msg){
        this.getDisplayBox().removeAll();
        if (!msg){
            msg = 'No data found for the selected item.';
        }

        this.getDisplayBox().add({
            xtype: 'container',
            html: '<div class="no-data-container"><div class="secondary-message">' + msg + '</div></div>'
        });
    },


    _updateView: function(fields){
       this.logger.log('_updateView', fields);

        var me = this;
        var pi = me.getPortfolioItem();

        me.logger.log('_updateView', pi);

        var releases = this.down('#cbReleases') && this.down('#cbReleases').getValue() || [];

        if (!pi || pi.get('ObjectID') === null || (releases.length < 1 && 'UserStory' == me.selectedPiLevelType)){
            me.showMsg("Please select a portfolio item and releases");
            return;
        }


        if (!pi ){
            me.showMsg("Please select a portfolio item.");
            return;
        }

        me.setLoading("Loading...");

        Ext.create('Rally.data.wsapi.Store', {
            model: me.selectedPiLevelType == 'UserStory' ? me.featurePI : me.thirdLevelPI,//me.featurePI,
            autoLoad: true,
            fetch: ['Name','FormattedID'],
            context: {
                projectScopeUp: false,
                projectScopeDown: true
            },
            filters: [
                {
                    property: 'Parent',
                    value: pi.get('_ref')
                }
            ],
            listeners: {
                load: me._getFeaturesAsColumns,
                scope: me
            }
        });

    },

    _getFeaturesAsColumns: function(store, records) {
        var me = this;

        if(records.length < 1){
            me.showMsg("No records for selected crieria");
            me.setLoading(false);
            return;
        }
        var columns = [];

        //TODO
        //var type = me.selectedPiLevelType == 'UserStory' ? 'Feature' : 'PortfolioItem';//me.featurePI,
        _.each(records, function(record){
            var headerData = {};

            if(me.selectedPiLevelType == 'UserStory'){
              headerData = {Feature: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate',{}).apply(record.data) + ': ' + record.get('_refObjectName') }; //+ '  ' +  me._getAddStoryButton(record)},
            } else {
              headerData = {Parent: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate',{}).apply(record.data) + ': ' + record.get('_refObjectName') };
            }

            columns.push({
              value: record.getRef().getRelativeUri(),
              record: record,
              columnHeaderConfig: {
                  headerData: headerData,
                  listeners: {
                    boxready: function(header){
                      this._updateColumnHeaderData(header, record, true);
                    },
                    scope: this
                  }
              }
            });
        }, this);
        me._addBoard(columns);
    },

    _updateColumnHeaderData: function(columnHeader, record, expanded){

      if (columnHeader.down('#addButton')){
        columnHeader.down('#addButton').destroy();
      }

      if (expanded){
        var selectedPIType = this.selectedPiLevelType,
            buttonLabel = selectedPIType == 'UserStory' ? 'Add Story' : 'Add '+ this.secondLevelPI.replace('PortfolioItem/','');

        columnHeader.down('#headerTitle').add({
            xtype: 'rallybutton',
            itemId: 'addButton',
            text: buttonLabel,
            scope: this,
            cls: 'request-button',
            handler: function () {
                this._createStoryDialog(record);
            }
          });
      }

    },
    _createStoryDialog: function(record){

        var me = this;
        if (me.dialog){me.dialog.destroy();}
        var type = me.selectedPiLevelType == 'UserStory' ? 'User Story' : me.secondLevelPI.replace('PortfolioItem/','');
        var dTitle = 'Create a New '+ type + ' for ' + record.get('Name');

        me.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 20 },
            closable: true,
            draggable: true,
            title: dTitle,
            listeners: {
              render: function(dlg){
                  dlg.down('#userStoryName').focus();
              }
            },
            items: [
                    {
                      xtype: 'textfield',
                      itemId:'userStoryName',
                      name: 'userStoryName',
                      fieldLabel: type + ' Name',
                      margin: '10 10 10 10',
                      width:400,
                      listeners: {
                          afterrender: function(field) {
                            Ext.defer(function() {
                                field.focus(true, 100);
                            }, 1);
                        }
                      },
                      allowBlank: false  // requires a non-empty value
                    },
                    {
                        xtype: 'rallybutton',
                        text: 'Create ' + type,
                        margin: '10 10 10 10',
                        cls: 'primary',
                        listeners: {
                            click: function(){
                                return me._createUserStories(record);
                            },
                            scope: me
                        }
                    }]
        });
        me.dialog.show();
    },

    _createUserStories: function(record){
        //Create a US record, specifying initial values in the constructor
        var me = this;
        var userStoryRec = {
            Name: me.dialog ? me.dialog.down('#userStoryName').value:'',
            ScheduleState: me.scheduleStateFieldInitialValue,
            Project:me.getContext().get('project'),
            Owner:me.getContext().get('user')
        }

        if(me.selectedPiLevelType == 'UserStory'){
            userStoryRec['ScheduleState'] = me.scheduleStateFieldInitialValue;
            userStoryRec['PortfolioItem'] = record.get('_ref');
        }else{
            userStoryRec['State'] = me.secondLevelStateFieldInitialValue;
            userStoryRec['Parent'] = record.get('_ref');
        }

        var record = me.selectedPiLevelType == 'UserStory' ? Ext.create(me.storyModel, userStoryRec) : Ext.create(me.secondLevelPIModel, userStoryRec);

        record.save({
            params: {rankTo: 'BOTTOM'},
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {
                    //Get the new stories formatted id
                    var formattedId = result.get('FormattedID');
                    //Display success msg
                    me.showMsg(me.selectedPiLevelType + " Created."+formattedId);
                    if(me.dialog) {me.dialog.destroy();}
                    me._updateView();
                }
            },
            scope:me
        });



    },

    _createFeatures: function(){
        //Create a US record, specifying initial values in the constructor
        var me = this;
        var pi = me.getPortfolioItem();
        if (!pi ){
            me.showMsg("Please select a portfolio item.");
            return;
        }

        var featureRec = {
            Name: me.down('#featureName').value,
            Project:me.getContext().get('project'),
            Owner:me.getContext().get('user'),
            Parent: pi.get('_ref'),
            State: me.selectedPiLevelType == 'UserStory' ? me.stateFieldInitialValue : me.thirdLevelStateFieldInitialValue
        }

        var record = me.selectedPiLevelType == 'UserStory' ? Ext.create(me.featureModel, featureRec) : Ext.create(me.thirdLevelPIModel, featureRec);

        record.save({
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {
                    //Get the new stories formatted id
                    var formattedId = result.get('FormattedID');
                    //Display success msg
                    me.showMsg("PI Created."+formattedId);
                    me._updateView();
                }
            },
            scope:me
        });

    },

    _addBoard: function(columns) {
        var me = this;

        me.getDisplayBox().removeAll();

        var releases = this.down('#cbReleases') && this.down('#cbReleases').getValue() || [];

        var releaseFilters = [{property:'Release',value:null}];

        var rowReleaseRecords = [];

        this.logger.log('addBoard', me._getAlwaysSelectedFields());
        var storeConfig = {
                context: this.getContext().getDataContext(),
                fetch: me._getAlwaysSelectedFields(),
                context: {
                    projectScopeUp: false,
                    projectScopeDown: true
                },
                limit: 'Infinity'
            }

        if(0 < releases.length){
            Ext.Array.each(releases, function(rel){
                releaseFilters.push({property:'Release.Name',value:rel});
            });
            storeConfig['filters'] = Rally.data.wsapi.Filter.or(releaseFilters);

            Ext.Array.each( me.releases, function(record) {
                if(Ext.Array.contains(releases, record.get('Name'))){
                    rowReleaseRecords.push(record.getData());
                }
            });
        }else{
            rowReleaseRecords.push(null);
        }

        var cardBoardConfig = {
            xtype: 'rallycardboard',
            itemId: 'storyCardBoard',
            types: me.selectedPiLevelType == 'UserStory' ? ['HierarchicalRequirement']:[me.secondLevelPI ],
            attribute: me.selectedPiLevelType == 'UserStory' ? 'PortfolioItem' : 'Parent',
            plugins: [
                {
                    ptype: 'rallyscrollablecardboard',
                    containerEl: this.getEl()
                }
            ],
            cardConfig: {
                editable: true,
                showIconMenus: true,
                fields: me._getAlwaysSelectedFields(),
                //showAge: this.getSetting('showCardAge') ? this.getSetting('cardAgeThreshold') : -1,
                showBlockedReason: true
            },
            storeConfig: storeConfig,
            context: me.getContext(),
            columnConfig: {
                columnHeaderConfig: {
                    headerTpl: me.selectedPiLevelType == 'UserStory' ? '{Feature}' : '{Parent}'
                },
                plugins: [{
                    ptype: 'rallycardboardcollapsiblecolumns'
                }]
            },

            loadMask: 'Loading!',
            columns: columns,
            listeners: {
              scope: this,
              columnvisibilitychanged: function(collapsiblePlugin){


                if (!collapsiblePlugin || !collapsiblePlugin.getCmp || !collapsiblePlugin.column){ return; }

                this.logger.log('columnvisibilitychanged', collapsiblePlugin.getCmp().getWidth());

                var record = collapsiblePlugin.column && collapsiblePlugin.column.record,
                    columnHeader = collapsiblePlugin.getCmp().getColumnHeader();

                this._updateColumnHeaderData(columnHeader, record, collapsiblePlugin.columnExpanded) ;

              }
            }
        };

        if(me.selectedPiLevelType == 'UserStory'){
            cardBoardConfig['rowConfig'] = {
                field: 'Release',
                values: rowReleaseRecords,
                enableCrossRowDragging: true
            };
        }

        me.getDisplayBox().add(cardBoardConfig);

        me.setLoading(false);
    },


    _getAlwaysSelectedFields: function() {
        var columns = this.getSetting('columnNames');
        var additionalColumns = [];
        if (this.down('fieldpickerbutton')){
           additionalColumns = this.down('fieldpickerbutton').getFields();
        }

        if ( Ext.isEmpty(columns) ) {
            return additionalColumns;
        }


        if ( Ext.isString(columns) ) {
            columns = columns.split(',');
        }

        return Ext.Array.unique( columns.concat(additionalColumns) );
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },

    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },

    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }

});


               Rally.launchApp('StoryMapApp', {
                   name: 'Story Map App'
               });
        });
    </script>

    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>
    
<style type="text/css" title="printStoryMap">
/* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
@media print {
    #interface {
        display: none;
    }

    .pb {
        page-break-after: always;
        clear: both;
    }

    body {
        background-color: #fff;
        margin: 0;
        padding: 0;
        font-family: ProximaNova, helvetica, sans-serif;
        color: #000;
    }
}

#interface, #printSection {
    margin: 20px;
}

td {
  vertical-align: top;
}

h1.initiative-title {
  font-family: ProximaNovaBold, helvetica, sans-serif;
  font-size: 18px;
  text-align: center;
  text-transform: uppercase;

}

.feature-cell {
  background-color: #ccc;
  vertical-align: middle;
  font-family: ProximaNova, helvetica, sans-serif;
  text-align: center;
  border: 1px solid black;
}

.story-cell {
  vertical-align: middle;
  font-family: ProximaNova, helvetica, sans-serif;
  font-size: 11px;
  text-align: left;
  border: 1px solid black;
  padding: 10px;
}

.empty-cell {
  background-color: white;
  vertical-align: middle;
  font-family: ProximaNova, helvetica, sans-serif;
  text-align: center;
  border: 0px;
}

.release-cell {
  background-color: #222;
  color: #fff;
  font-family: ProximaNovaSemiBold, helvetica, sans-serif;
  font-size: 14px;
  text-align: center;
  border: 1px solid black;
}

</style>

</head>
<body></body>
</html>